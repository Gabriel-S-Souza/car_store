// Mocks generated by Mockito 5.4.2 from annotations
// in car_store/test/mocks/build_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:car_store/features/auth/domain/entities/login_credentials_entity.dart'
    as _i6;
import 'package:car_store/features/auth/domain/entities/register_user_model.dart'
    as _i7;
import 'package:car_store/features/auth/domain/entities/user_entity.dart'
    as _i5;
import 'package:car_store/features/auth/domain/repositories/login_repository.dart'
    as _i3;
import 'package:car_store/features/vehicle_store/domain/entities/vehicle_details_entity.dart'
    as _i10;
import 'package:car_store/features/vehicle_store/domain/entities/vehicle_entity.dart'
    as _i9;
import 'package:car_store/features/vehicle_store/domain/repositories/vehicle_reader_repository.dart'
    as _i8;
import 'package:car_store/features/vehicle_store/domain/repositories/vehicle_writer_repositoty.dart'
    as _i11;
import 'package:car_store/shared/domain/entities/result.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.UserEntity>> login(
          _i6.LoginCredentialsEntity? credentialsEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [credentialsEntity],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.UserEntity>>.value(
            _FakeResult_0<_i5.UserEntity>(
          this,
          Invocation.method(
            #login,
            [credentialsEntity],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.UserEntity>>);

  @override
  _i4.Future<_i2.Result<_i2.VoidSuccess>> register(
          _i7.RegisterUserEntity? userEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [userEntity],
        ),
        returnValue: _i4.Future<_i2.Result<_i2.VoidSuccess>>.value(
            _FakeResult_0<_i2.VoidSuccess>(
          this,
          Invocation.method(
            #register,
            [userEntity],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i2.VoidSuccess>>);
}

/// A class which mocks [VehicleReaderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehicleReaderRepository extends _i1.Mock
    implements _i8.VehicleReaderRepository {
  MockVehicleReaderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i9.VehicleEntity>>> getVehicles(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVehicles,
          [page],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i9.VehicleEntity>>>.value(
            _FakeResult_0<List<_i9.VehicleEntity>>(
          this,
          Invocation.method(
            #getVehicles,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i9.VehicleEntity>>>);

  @override
  _i4.Future<_i2.Result<_i10.VehicleDetailsEntity>> getDetails(
          int? ivehicleId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [ivehicleId],
        ),
        returnValue: _i4.Future<_i2.Result<_i10.VehicleDetailsEntity>>.value(
            _FakeResult_0<_i10.VehicleDetailsEntity>(
          this,
          Invocation.method(
            #getDetails,
            [ivehicleId],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i10.VehicleDetailsEntity>>);
}

/// A class which mocks [VehicleWriterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehicleWriterRepository extends _i1.Mock
    implements _i11.VehicleWriterRepository {
  MockVehicleWriterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i2.VoidSuccess>> registerVehicle(
          _i10.VehicleDetailsEntity? vehicle) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerVehicle,
          [vehicle],
        ),
        returnValue: _i4.Future<_i2.Result<_i2.VoidSuccess>>.value(
            _FakeResult_0<_i2.VoidSuccess>(
          this,
          Invocation.method(
            #registerVehicle,
            [vehicle],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i2.VoidSuccess>>);

  @override
  _i4.Future<_i2.Result<_i2.VoidSuccess>> updateVehicle(
          _i10.VehicleDetailsEntity? vehicle) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVehicle,
          [vehicle],
        ),
        returnValue: _i4.Future<_i2.Result<_i2.VoidSuccess>>.value(
            _FakeResult_0<_i2.VoidSuccess>(
          this,
          Invocation.method(
            #updateVehicle,
            [vehicle],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i2.VoidSuccess>>);

  @override
  _i4.Future<_i2.Result<_i2.VoidSuccess>> deleteVehicle(int? vehicleId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteVehicle,
          [vehicleId],
        ),
        returnValue: _i4.Future<_i2.Result<_i2.VoidSuccess>>.value(
            _FakeResult_0<_i2.VoidSuccess>(
          this,
          Invocation.method(
            #deleteVehicle,
            [vehicleId],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i2.VoidSuccess>>);
}
